<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到我的Blog</title>
  
  <subtitle>热爱或者离开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-06T06:37:35.095Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>宾克斯的美酒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode下使用ESLint代码风格检验</title>
    <link href="http://yoursite.com/2018/02/06/VSCode%E4%B8%8B%E4%BD%BF%E7%94%A8ESLint%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%A3%80%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/02/06/VSCode下使用ESLint代码风格检验/</id>
    <published>2018-02-06T06:35:12.000Z</published>
    <updated>2018-02-06T06:37:35.095Z</updated>
    
    <content type="html"><![CDATA[<p>团队协作开发中，为了统一代码风格，避免一些低级错误，应该设有团队成员统一遵守的编码规范。很多语言都提供了Lint工具来实现这样的功能，JavaScript也有类似的工具：ESLint。除了可以集成到构建工具中(如：Gulp)在构建过程中检查代码风格以外；还可以通过将ESLint和代码编辑器相结合以提供代码风格的实时校验。这里将介绍如何在Visual Studio Code使用ESLint来提供代码风格的实时校验。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在VsCode的扩展中,搜索ESLint安装完成后重启</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;团队协作开发中，为了统一代码风格，避免一些低级错误，应该设有团队成员统一遵守的编码规范。很多语言都提供了Lint工具来实现这样的功能，JavaScript也有类似的工具：ESLint。除了可以集成到构建工具中(如：Gulp)在构建过程中检查代码风格以外；还可以通过将ESLint和代码编辑器相结合以提供代码风格的实时校验。这里将介绍如何在Visual Studio Code使用ESLint来提供代码风格的实时校验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="VSCode   ESLint" scheme="http://yoursite.com/tags/VSCode-ESLint/"/>
    
  </entry>
  
  <entry>
    <title>CodePush</title>
    <link href="http://yoursite.com/2018/01/19/react-native%20CodePush/"/>
    <id>http://yoursite.com/2018/01/19/react-native CodePush/</id>
    <published>2018-01-19T03:10:51.000Z</published>
    <updated>2018-01-19T08:34:39.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodePush简介"><a href="#CodePush简介" class="headerlink" title="CodePush简介"></a>CodePush简介</h2><a id="more"></a><p>CodePush 是微软提供的一套用于热更新 React Native 和 Cordova 应用的服务。<br>CodePush 是提供给 React Native 和 Cordova 开发者直接部署移动应用更新给用户设备的云服务。CodePush 作为一个中央仓库，开发者可以推送更新 (JS, HTML, CSS and images)，应用可以从客户端 SDK 里面查询更新。CodePush 可以让应用有更多的可确定性，也可以让你直接接触用户群。在修复一些小问题和添加新特性的时候，不需要经过二进制打包，可以直接推送代码进行实时更新。</p><p>CodePush 可以进行实时的推送代码更新：</p><ul><li>直接对用户部署代码更新</li><li>管理 Alpha，Beta 和生产环境应用</li><li>支持 React Native 和 Cordova</li><li>支持JavaScript 文件与图片资源的更新</li></ul><p>CodePush开源了react-native版本，<a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="external">react-native-code-push</a> 托管在GitHub上。</p><h2 id="安装-CodePush-CLI"><a href="#安装-CodePush-CLI" class="headerlink" title="安装 CodePush CLI"></a>安装 CodePush CLI</h2><p>在终端输入:<code>npm install -g code-push-cli</code>   安装完毕以后提示输入：code-push -v确认是否安装成功 </p><h2 id="创建Code-Push账号"><a href="#创建Code-Push账号" class="headerlink" title="创建Code-Push账号"></a>创建Code-Push账号</h2><p>在终端输入:code-push register，会打开注册页面让你选择授权账号</p><p>完成相应注册后将会获得一个key,复制到终端即可登录(code-push login)。</p><p> 账号相关命令：</p><ul><li><p>code-push login 登陆</p></li><li><p>code-push logout 注销 (不注销的话,会一直登陆)</p></li><li><p>code-push access-key ls 列出登陆的token</p></li><li><p>code-push access-key rm <accesskye> 删除某个 access-key</accesskye></p></li></ul><h2 id="集成CodePush-SDK-Android"><a href="#集成CodePush-SDK-Android" class="headerlink" title="集成CodePush SDK(Android)"></a>集成CodePush SDK(Android)</h2><p>下面我们通过如下步骤在Android项目中集成CodePush。</p><ol><li><p>在项目中安装 react-native-code-push插件，终端进入你的项目根目录然后运行<br><code>npm install --save react-native-code-push</code></p></li><li><p>在Android project中安装插件。<br>CodePush提供了两种方式：RNPM 和 Manual，本次演示所使用的是RNPM。<br>运行npm i -g rnpm，来安装RNPM。</p></li><li><p>运行 rnpm link react-native-code-push。这条命令将会自动帮我们在anroid文件中添加好设置。</p></li></ol><p><code>在终端运行此命令之后，终端会提示让你输入deployment key，这是你只需将你的deployment Staging key输入进去即可，如果不输入则直接单击enter跳过即可。</code></p><ol><li>在 android/app/build.gradle文件里面添如下代码：</li></ol><p><code>apply from: &quot;../../node_modules/react-native-code-push/android/codepush.gradle&quot;</code><br>然后在/android/settings.gradle中添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include &apos;:react-native-code-push&apos; </div><div class="line">project(&apos;:react-native-code-push&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-code-push/android/app&apos;)</div></pre></td></tr></table></figure><ol><li>运行 code-push deployment -k ls <appname>获取 部署秘钥。</appname></li></ol><p>默认的部署名是 staging，所以 部署秘钥（deployment key ） 就是 staging。<br>第六步： 添加配置。当APP启动时我们需要让app向CodePush咨询JS bundle的所在位置，这样CodePush就可以控制版本。更新 MainApplication.java文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class MainApplication extends Application implements ReactApplication &#123;</div><div class="line">  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123;</div><div class="line">    @Override</div><div class="line">    protected boolean getUseDeveloperSupport() &#123;</div><div class="line">      return BuildConfig.DEBUG;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected String getJSBundleFile() &#123;</div><div class="line">      return CodePush.getJSBundleFile();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">     return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">         ...  //这个BuildConfig.CODEPUSH_KEY在后面会看到</div><div class="line">         new CodePush(BuildConfig.CODEPUSH_KEY, MainApplication.this, BuildConfig.DEBUG), // Add/change this line.</div><div class="line">         ...</div><div class="line">     );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &#125;;</div><div class="line">  @Override</div><div class="line">  public ReactNativeHost getReactNativeHost() &#123;</div><div class="line">      return mReactNativeHost;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>关于deployment-key的设置</li></ol><p>在上述代码中我们在创建CodePush实例的时候需要设置一个deployment-key,因为deployment-key分生产环境与测试环境两种,所以建议大家在build.gradle中进行设置。在build.gradle中的设置方法如下:</p><p>打开android/app/build.gradle文件,找到android { buildTypes {} }然后添加如下代码即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            ...</div><div class="line">            // CodePush updates should not be tested in Debug mode</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        releaseStaging &#123;</div><div class="line">            ...</div><div class="line">            buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;&lt;INSERT_STAGING_KEY&gt;&quot;&apos;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;&lt;INSERT_PRODUCTION_KEY&gt;&quot;&apos;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>修改versionName。<br>在 android/app/build.gradle中有个 android.defaultConfig.versionName属性，我们需要把 应用版本改成 1.0.0（默认是1.0，但是codepush需要三位数）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">    defaultConfig&#123;</div><div class="line">        versionName &quot;1.0.0&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CodePush简介&quot;&gt;&lt;a href=&quot;#CodePush简介&quot; class=&quot;headerlink&quot; title=&quot;CodePush简介&quot;&gt;&lt;/a&gt;CodePush简介&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各种代码彩蛋</title>
    <link href="http://yoursite.com/2017/12/25/%E5%90%84%E7%A7%8D%E4%BB%A3%E7%A0%81%E5%BD%A9%E8%9B%8B/"/>
    <id>http://yoursite.com/2017/12/25/各种代码彩蛋/</id>
    <published>2017-12-25T03:30:38.000Z</published>
    <updated>2017-12-25T05:41:18.514Z</updated>
    
    <content type="html"><![CDATA[<ol><li>圣诞彩蛋</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">__________________________________________________</div><div class="line">|                    _                             |</div><div class="line">| /|,/ _   _ _      / ` /_  _ .  _ _/_ _ _   _    _|</div><div class="line">|/  / /_&apos; / / /_/  /_, / / / / _\  /  / / / /_| _\ |</div><div class="line">|             _/                                   |</div><div class="line">|            ~~** ZhangShuai940527 **~~            |</div><div class="line">|__________________________________________________|</div><div class="line"></div><div class="line"></div><div class="line">                      ___</div><div class="line">                   /`   `&apos;.</div><div class="line">                  /   _..---;</div><div class="line">                  |  /__..._/  .--.-.</div><div class="line">                  |.&apos;  e e | ___\_|/____</div><div class="line">                 (_)&apos;--.o.--|    | |    |</div><div class="line">                .-( `-&apos; = `-|____| |____|</div><div class="line">               /  (         |____   ____|</div><div class="line">               |   (        |_   | |  __|</div><div class="line">               |    &apos;-.--&apos;;/&apos;/__ | | (  `|</div><div class="line">               |      &apos;.   \    )&quot;&quot;;--`\ /</div><div class="line">               \        ;   |--&apos;    `;.-&apos;</div><div class="line">               |`-.__ ..-&apos;--&apos;`;..--&apos;`</div><div class="line"></div><div class="line">:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;圣诞彩蛋&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/di
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css-Tips</title>
    <link href="http://yoursite.com/2017/12/25/css-Tips/"/>
    <id>http://yoursite.com/2017/12/25/css-Tips/</id>
    <published>2017-12-25T03:00:31.000Z</published>
    <updated>2017-12-25T03:24:16.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何去掉-chrome-input-的背景黄色"><a href="#如何去掉-chrome-input-的背景黄色" class="headerlink" title="如何去掉 chrome input 的背景黄色"></a>如何去掉 chrome input 的背景黄色</h1><p>当我们在做登陆页面的时候，在 chrome 中 input 会带上自动补全的黄色背景，大大影响美观。很多网站都没有去处理，但这并不难处理。作为高逼格的前端，这里就可以体现出你的价值，解决方案如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">input:-webkit-autofill &#123;</div><div class="line">  -webkit-box-shadow: 0 0 0px 1000px rgba(255, 255, 255, 0.5) inset !important;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当然，你也可以使用方案二，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">input:-webkit-autofill &#123;</div><div class="line">  -webkit-animation-name: autofill;</div><div class="line">  -webkit-animation-fill-mode: both;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes autofill &#123;</div><div class="line">  to &#123;</div><div class="line">    color: #fff;</div><div class="line">    background: transparent;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>深入了解请移步：</p><ol><li><a href="chrome 表单自动填充去掉 input 黄色背景解决方案">http://blog.csdn.net/wangxiaohui6687/article/details/10149579</a></li><li><a href="Removing input background colour for Chrome autocomplete">https://stackoverflow.com/questions/2781549/removing-input-background-colour-for-chrome-autocomplete</a></li></ol><h1 id="CSS实现单行、多行文本溢出显示省略号（…）"><a href="#CSS实现单行、多行文本溢出显示省略号（…）" class="headerlink" title="CSS实现单行、多行文本溢出显示省略号（…）"></a>CSS实现单行、多行文本溢出显示省略号（…）</h1><h3 id="1-如果实现单行文本的溢出显示省略号我们应该都知道用text-overflow-ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。"><a href="#1-如果实现单行文本的溢出显示省略号我们应该都知道用text-overflow-ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。" class="headerlink" title="1. 如果实现单行文本的溢出显示省略号我们应该都知道用text-overflow:ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。"></a>1. 如果实现单行文本的溢出显示省略号我们应该都知道用text-overflow:ellipsis属性来，当然还需要加宽度width属来兼容部分浏览。</h3><p>实现方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;</div><div class="line">text-overflow:ellipsis;</div><div class="line">white-space: nowrap;</div></pre></td></tr></table></figure><h3 id="2-如果我们要实现多行文本溢出显示省略号呢"><a href="#2-如果我们要实现多行文本溢出显示省略号呢" class="headerlink" title="2. 如果我们要实现多行文本溢出显示省略号呢?"></a>2. 如果我们要实现多行文本溢出显示省略号呢?</h3><p>多行文本溢出，我们可以使用WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">  display:-webkit-box;将对象作为弹性伸缩盒子模型显示 </div><div class="line">  -webkit-box-orient:vertical;设置或检索伸缩盒对象的子元素的排列方式 。</div><div class="line">  -webkit-line-clamp:3;设置显示多少行</div><div class="line">*/</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何去掉-chrome-input-的背景黄色&quot;&gt;&lt;a href=&quot;#如何去掉-chrome-input-的背景黄色&quot; class=&quot;headerlink&quot; title=&quot;如何去掉 chrome input 的背景黄色&quot;&gt;&lt;/a&gt;如何去掉 chrome input
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js的数组操作</title>
    <link href="http://yoursite.com/2017/12/19/js%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/12/19/js的数组操作/</id>
    <published>2017-12-19T07:53:36.000Z</published>
    <updated>2017-12-19T09:57:33.680Z</updated>
    
    <content type="html"><![CDATA[<p>对js数组操作的一些疑问</p><a id="more"></a><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><p>老生常谈的问题</p><h3 id="indexOf去重法"><a href="#indexOf去重法" class="headerlink" title="indexOf去重法"></a>indexOf去重法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr=[1,1,3,&apos;string&apos;,&apos;1&apos;,&apos;string&apos;];</div><div class="line">var s=[];</div><div class="line">for(var i=0,j=arr.length;i&lt;j;i++)&#123;</div><div class="line">    if(s.indexOf(arr[i])==-1)&#123;</div><div class="line">       s.push(arr[i])</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">console.log(s)           //  1,3,&apos;string&apos;,&apos;1&apos;</div></pre></td></tr></table></figure><h3 id="filter去重法"><a href="#filter去重法" class="headerlink" title="filter去重法"></a>filter去重法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr=[1,1,3,&apos;string&apos;,&apos;1&apos;,&apos;string&apos;];</div><div class="line">arr.filter((i,index,item)=&gt;&#123;</div><div class="line">    return item.indexOf(i)==index</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="ES6的Set去重法"><a href="#ES6的Set去重法" class="headerlink" title="ES6的Set去重法"></a>ES6的Set去重法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr=[1,1,3,&apos;string&apos;,&apos;1&apos;,&apos;string&apos;]</div><div class="line">[...new Set(arr)]                           //简直不要太简单~</div></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var arr=[1,1,3,&apos;string&apos;,&apos;1&apos;,&apos;string&apos;];</div><div class="line">var s=[];</div><div class="line">for(var i=0,j=arr.length;i&lt;j;i++)&#123;</div><div class="line">    if(!s.includes(arr[i]))&#123;</div><div class="line">       s.push(arr[i])</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">console.log(s)           //  1,3,&apos;string&apos;,&apos;1&apos;</div></pre></td></tr></table></figure><h1 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h1><h3 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1.for()循环"></a>1.for()循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">这个是最简单的版本</div><div class="line">for(i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    </div><div class="line">&#125; </div><div class="line">使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显。</div><div class="line">for(i = 0,len=arr.length; i &lt; len; i++) &#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其实这块比较模糊的是forEach 和 map的区别,但还是把所有的遍历都记录一下吧</p><h3 id="2-forEach-和map-的区别"><a href="#2-forEach-和map-的区别" class="headerlink" title="2.forEach()和map()的区别"></a>2.forEach()和map()的区别</h3><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><p>map定义和用法： </p><ul><li>map方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。 (新数组跟原始数组处于一个映射关系)</li><li>我的理解就是：原数组进行处理之后对应的一个新的数组。 </li><li>map()方法按照原始数组元素顺序依次处理元素。 </li><li>注意：map()方法不会对空数组进行检测。 </li><li>map()方法不会改变原始数组。 </li></ul><p>相同点：</p><ul><li>都是循环遍历数组中的每一项</li><li>forEach和map方法里每次执行匿名函数都支持3个参数，参数分别是item（当前每一项）、index（索引值）、arr（原数组）</li><li>匿名函数中的this都是指向window</li><li>只能遍历数组,不支持对象.</li></ul><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h5><p>为每个元素执行对应的方法,forEach是用来替换for循环的</p><h3 id="3-find-filter-和findIndex"><a href="#3-find-filter-和findIndex" class="headerlink" title="3.find() filter() 和findIndex()"></a>3.find() filter() 和findIndex()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//filter用来过滤出数组所有符合条件的</div><div class="line">var arr=[1,2,3,44,10,15]</div><div class="line">arr.filter((i)=&gt; i&gt;9)              //44,10,15</div><div class="line"></div><div class="line">//find 用来找到数组第一个符合条件的</div><div class="line">var arr=[1,2,3,44,10,15]</div><div class="line">arr.find((i)=&gt; i&gt;9)                //44</div></pre></td></tr></table></figure><p>//findIndex 用来找到数组第一个符合条件的下标,如果所有成员都不符合条件，则返回-1。<br>var arr=[1,2,3,44,10,15]<br>arr.findIndex((i)=&gt; i&gt;9)           // 3   数组中第一个大于9的是44下标为3 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对js数组操作的一些疑问&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/12/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/18/正则表达式/</id>
    <published>2017-12-18T11:02:48.000Z</published>
    <updated>2017-12-19T06:54:28.544Z</updated>
    
    <content type="html"><![CDATA[<p>常用的正则表达式<br><a id="more"></a></p><h2 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">数字：^[0-9]*$</div><div class="line">n位的数字：^\d&#123;n&#125;$</div><div class="line">至少n位的数字：^\d&#123;n,&#125;$</div><div class="line">m-n位的数字：^\d&#123;m,n&#125;$</div><div class="line">零和非零开头的数字：^(0|[1-9][0-9]*)$</div><div class="line">非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</div><div class="line">带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</div><div class="line">正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</div><div class="line">有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class="line">有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</div><div class="line">非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$</div><div class="line">非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</div><div class="line">非负整数：^\d+$ 或 ^[1-9]\d*|0$</div><div class="line">非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</div><div class="line">非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</div><div class="line">非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</div><div class="line">正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</div><div class="line">负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</div><div class="line">浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</div></pre></td></tr></table></figure><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$</div><div class="line">英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$</div><div class="line">长度为3-20的所有字符：^.&#123;3,20&#125;$</div><div class="line">由26个英文字母组成的字符串：^[A-Za-z]+$</div><div class="line">由26个大写英文字母组成的字符串：^[A-Z]+$</div><div class="line">由26个小写英文字母组成的字符串：^[a-z]+$</div><div class="line">由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</div><div class="line">由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$</div><div class="line">中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</div><div class="line">可以输入含有^%&amp;&apos;,;=?$\&quot;等字符：[^%&amp;&apos;,;=?$\x22]+</div><div class="line">禁止输入含有~的字符：[^~\x22]+</div></pre></td></tr></table></figure><h2 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</div><div class="line">域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</div><div class="line">InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</div><div class="line">手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</div><div class="line">电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</div><div class="line">国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</div><div class="line">身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$</div><div class="line">短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</div><div class="line">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</div><div class="line">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</div><div class="line">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</div><div class="line">日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</div><div class="line">一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</div><div class="line">一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</div><div class="line">xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</div><div class="line">中文字符的正则表达式：[\u4e00-\u9fa5]</div><div class="line">双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</div><div class="line">空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</div><div class="line">HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</div><div class="line">首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</div><div class="line">腾讯QQ号：[1-9][0-9]&#123;4,&#125;    (腾讯QQ号从10000开始)</div><div class="line">中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</div><div class="line">IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</div><div class="line">IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</div></pre></td></tr></table></figure><h2 id="钱的输入格式："><a href="#钱的输入格式：" class="headerlink" title="钱的输入格式："></a>钱的输入格式：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</div><div class="line">2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</div><div class="line">3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</div><div class="line">4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</div><div class="line">5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$</div><div class="line">6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$</div><div class="line">7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</div><div class="line">8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</div><div class="line">备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的正则表达式&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React-native中使用redux</title>
    <link href="http://yoursite.com/2017/12/12/React-native%E4%B8%AD%E4%BD%BF%E7%94%A8redux/"/>
    <id>http://yoursite.com/2017/12/12/React-native中使用redux/</id>
    <published>2017-12-12T04:09:13.000Z</published>
    <updated>2018-05-25T02:28:25.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   Flux就像眼镜,你会知道你在什么时候需要它<br> <a id="more"></a></p></blockquote><h1 id="redux个人理解"><a href="#redux个人理解" class="headerlink" title="redux个人理解"></a>redux个人理解</h1><p>使用redux的目的是方便我们理清各个组件的state状态,我们在组件中使用props传递数据传来传去也容易搞混,这个时候,就是redux大显神威的时候,</p><ol><li>单一数据源,所有数据都存储在store中,我们需要什么数据就是store调用</li><li>state只读，state 只能通过action进行更改.</li><li>在改变state tree时，用到action，但是我们是通过reducers来处理函数的</li></ol><h1 id="添加redux相关依赖"><a href="#添加redux相关依赖" class="headerlink" title="添加redux相关依赖"></a>添加redux相关依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1   npm install  redux react-redux   -S  //这两个是必须的</div><div class="line">2   npm install redux-logger(日志记录)   redux-thunk(支持异步请求)    -S    //中间件可选</div><div class="line">3   react-native run-android</div></pre></td></tr></table></figure><h1 id="redux中几个重要的概念"><a href="#redux中几个重要的概念" class="headerlink" title="redux中几个重要的概念"></a>redux中几个重要的概念</h1><h4 id="1-Action"><a href="#1-Action" class="headerlink" title="1. Action"></a>1. Action</h4><p> 中文译为行为.像它的名字一样,我们在redux体系中修改一个状态必须先发出action ,action是行为,一个行为可以分为不同的几种类型,比如打人,打别人左脸是一种type ,打右脸也是一种type,当然选择不打也是这种行为的一种体现方式.我们选择的type就会影响到这个人受挨打后的状态,那也就是他可能第二天左脸肿了,或右脸.<br>所以这里一种打人行为的几种处理方式,会造成不同的表现结果,也就是我们所谓的 ui对应的各种展现方式.</p><p><img src="http://upload-images.jianshu.io/upload_images/4985985-a58fad88cb896f2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="计数"><br>我在这里是定义了三种关于计数的type </p><h4 id="2-dispatch"><a href="#2-dispatch" class="headerlink" title="2. dispatch"></a>2. dispatch</h4><p>说完了行为,该说调度了,我们定义了各种各样的行为,但是之前也说过redux是单向数据流,想要触发action我们需要使用我们触发了一个计数的增加操作dispath(increase)<br><img src="http://upload-images.jianshu.io/upload_images/4985985-ec545f2f3d7d2b98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加"></p><h4 id="3-connect"><a href="#3-connect" class="headerlink" title="3.  connect"></a>3.  connect</h4><p><img src="http://upload-images.jianshu.io/upload_images/4985985-ee066f46592a0bab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="connect"></p><p>  React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。<br>  connect 在我理解看来就是,连接reducers处理函数与ui的一个方法.</p><ul><li>mapStateToProps会订阅 Store，每当state更新的时候，就会自动执行，重新计算 UI 组件的参数，从而触发 UI 组件的重新渲染。</li><li>mapDispatchToProps是connect函数的第二个参数，用来建立 UI 组件的参数到store.dispatch方法的映射。也就是说，它定义了哪些用户的操作应该当作 Action，传给 Store。它可以是一个函数，也可以是一个对象。</li></ul><h4 id="4-reducers"><a href="#4-reducers" class="headerlink" title="4. reducers"></a>4. reducers</h4><p> dispath 将action派发到reducers中我们根据派发过来的actions.type来具体确定使用什么业务逻辑来改变一些数据,致使ui发生改变,如图,我们可以自定义state的初始状态<br><img src="http://upload-images.jianshu.io/upload_images/4985985-f440cedc079d52ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><strong>顺带插一嘴</strong><br>combineReducers<br>我们呢在实际项目中,不可能只有counter这一个reducers处理函数,肯定会有非常多,那么 combineReducers 就是用来管理这一堆reducers的<br><img src="http://upload-images.jianshu.io/upload_images/4985985-29738a8145bbab34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将counter引入进来,组织好后统一暴露出去"></p><h4 id="5-store"><a href="#5-store" class="headerlink" title="5. store"></a>5. store</h4><p> 说了半天,store哪里去了,刚才有没有好奇reducers处理完成后,store如何更新的?应该这么问reducers处理函数直接影响了新的视图,但是好像并没有看到他们在哪里关联?看完下面就明白了<br><img src="http://upload-images.jianshu.io/upload_images/4985985-73658aa970dcea32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store"></p><p>Provider包裹住整个app将 store传入,起点即终点,完成一次循环,看到这里全部连起来了吧.<br><img src="http://upload-images.jianshu.io/upload_images/4985985-a2833f93a0a0f138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Provider"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   Flux就像眼镜,你会知道你在什么时候需要它&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android打包生成Apk</title>
    <link href="http://yoursite.com/2017/12/12/react-native%20Android%E6%89%93%E5%8C%85%E7%94%9F%E6%88%90Apk/"/>
    <id>http://yoursite.com/2017/12/12/react-native Android打包生成Apk/</id>
    <published>2017-12-12T04:01:37.000Z</published>
    <updated>2017-12-12T04:08:00.612Z</updated>
    
    <content type="html"><![CDATA[<p> react-native Android打包生成apk的过程<br><a id="more"></a></p><h1 id="1-产生签名的key"><a href="#1-产生签名的key" class="headerlink" title="1, 产生签名的key"></a>1, 产生签名的key</h1><p>该过程会用到keytool，开发过安卓的都应该接触过该东西。详细请见<a href="https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/keytool.html" target="_blank" rel="external">密钥和证书管理工具</a></p><p>在项目的主目录中执行：</p><p><code>keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code><br>然后就会出现下图<br><img src="http://upload-images.jianshu.io/upload_images/4985985-a5e7befee857b9a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="没啥说的只想告诉大家最后一步,一定要输入个是~"><br>现在自己看你的项目跟目录发现多了一个 <code>my-release-key.keystore文件</code></p><p><strong>[注：在产生的时候需要提供密钥和存储密码，后续会用到]</strong></p><h1 id="2-设置gradle变量"><a href="#2-设置gradle变量" class="headerlink" title="2, 设置gradle变量"></a>2, 设置gradle变量</h1><p>1.把my-release-key.keystore文件放到你工程中的android/app文件夹下。<br>2.编辑 android/gradle.properties（没有这个文件你就创建一个），添加如下的代码（注意把其中的<em>**</em>替换为相应密码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</div><div class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=xx </div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=xx</div><div class="line">** [注意替换xx为你自己设置的密钥和存储密码]**</div></pre></td></tr></table></figure></p><blockquote><p>关于密钥库的注意事项:<br>一旦你在Play Store发布了你的应用，如果想修改签名，就必须用一个不同的包名来重新发布你的应用（这样也会丢失所有的下载数和评分）。所以请务必备份好你的密钥库和密码。</p></blockquote><p>#3, 添加签名到项目的gradle配置文件<br><strong>编辑你项目目录下的android/app/build.gradle，添加如下的签名配置：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123; ... &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            storeFile file(&quot;my-release-key.keystore文件的绝对路径&quot;)</div><div class="line">            storePassword  &quot;密钥密码&quot;</div><div class="line">            keyAlias &quot;my-key-alias&quot; </div><div class="line">            keyPassword &quot;存储密码&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p><p>#4,生成发行APK包<br><code>$ cd android &amp;&amp; ./gradlew assembleRelease</code><br>然后就可以在下图目录中找到apk文件了<br><img src="http://upload-images.jianshu.io/upload_images/4985985-e6e230f9ab27ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="apk"></p><p><strong>注意每次打包新的apk时候要删除之前的!!!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; react-native Android打包生成apk的过程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native Android开发记录</title>
    <link href="http://yoursite.com/2017/10/27/react-native%20Android%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/10/27/react-native Android开发记录/</id>
    <published>2017-10-27T08:16:20.000Z</published>
    <updated>2018-01-18T03:48:13.633Z</updated>
    
    <content type="html"><![CDATA[<p>公司最近要用react-native开发App,我负责android端的开发,在本地大概做了一些后,需要打包个apk看一下,查看了官网教程看不太懂.结合搜集来的一些资料终于打包成功,在此记录一下</p><a id="more"></a><h3 id="1-修改app名称-android"><a href="#1-修改app名称-android" class="headerlink" title="1,修改app名称(android)"></a>1,修改app名称(android)</h3><p>一般Android在打包的时候，如果没经过修改，那么应用显示的名称就是我们在react-native init时设定的名称，这肯定不是我们需要的，那么，如何修改呢？</p><p>我们打开项目的android/app/src/main/AndroidManifest.xml文件可以看到名称的设定：</p><p><img src="/2017/10/27/react-native Android开发记录/1.png" alt=""></p><p>这说明app的显示名称在@string/app_name中进行了设定。<br>那我们直接继续打开android/app/src/main/res/values/strings.xml，即可看到配置中的app_name，修改为你想要的即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;string name=&quot;app_name&quot;&gt;新的名称&lt;/string&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure><h3 id="2-修改app图标-android"><a href="#2-修改app图标-android" class="headerlink" title="2,修改app图标(android)"></a>2,修改app图标(android)</h3><p>文件路劲: android/app/src/main/res/mipmap–xxx,<br>或者<br>         android/app/src/main/res/drawable–xxx<br>每一个目录下有不同大小的图标– xxx.png&lt;适配安卓不同机型&gt;</p><h3 id="3-控制app只能横竖屏"><a href="#3-控制app只能横竖屏" class="headerlink" title="3,控制app只能横竖屏"></a>3,控制app只能横竖屏</h3><p>打开  AndroidManifest.xml 文件在<br>activity下添加   android:screenOrientation=”landscape”属性即可(landscape是横向，portrait是纵向)。</p><h3 id="4-Android下Box-shadow"><a href="#4-Android下Box-shadow" class="headerlink" title="4,Android下Box-shadow"></a>4,Android下Box-shadow</h3><p>在官方文档里,box-shadow只支持ios,<br>目前找到一种方法实现可以给盒子添加  <code>elevation: 10</code>  不过不可以改颜色,默认是灰色的阴影</p><h3 id="5-让安卓实现push动画"><a href="#5-让安卓实现push动画" class="headerlink" title="5,让安卓实现push动画"></a>5,让安卓实现push动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import CardStackStyleInterpolator from &apos;react-navigation/src/views/CardStackStyleInterpolator&apos;;</div><div class="line"></div><div class="line">// 在StackNavigator配置headerMode的地方，使用transitionConfig添加</div><div class="line">&#123;</div><div class="line">    headerMode: &apos;screen&apos;,</div><div class="line">    transitionConfig:()=&gt;(&#123;</div><div class="line">        screenInterpolator:CardStackStyleInterpolator.forHorizontal,</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6-实现Android返回键点击两次退出应用"><a href="#6-实现Android返回键点击两次退出应用" class="headerlink" title="6,实现Android返回键点击两次退出应用"></a>6,实现Android返回键点击两次退出应用</h3><p>这是一开始的思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import  BackHandler from &apos;react-native&apos;</div><div class="line"></div><div class="line">componentWillMount()&#123;  </div><div class="line">    BackHandler.addEventListener(&apos;hardwareBackPress&apos;, this._onBackAndroid );  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">componentUnWillMount()&#123;  </div><div class="line">    BackHandler.addEventListener(&apos;hardwareBackPress&apos;, this._onBackAndroid);  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">_onBackAndroid=()=&gt;&#123;  </div><div class="line">    let now = new Date().getTime();  </div><div class="line">    if(now - lastBackPressed &lt; 2500) &#123;  </div><div class="line">        return false;  </div><div class="line">    &#125;  </div><div class="line">    lastBackPressed = now;  </div><div class="line">    ToastAndroid.show(&apos;再点击一次退出应用&apos;,ToastAndroid.SHORT);  </div><div class="line">    return true;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>但是这段代码不管是在哪个界面都会显示提示’再点击一次退出应用’,而我们想要的效果是如果界面不是根界面，点击返回按钮，返回上一页；如果是根界面，点击提示“再点击一次退出应用”，再次点击退出应用。<br>那怎么判断它是不是根界面呢？又在哪里判断呢？</p><p>react-navigation中有一个onNavigationStateChange方法，可以得到导航状态的改变，打印log如下：<br><img src="/2017/10/27/react-native Android开发记录/2.jpg" alt=""></p><p>其中：prevNav是之前导航状态，nav是当前导航状态，action是当前进行的操作。所以我们可以通过当前导航的状态中的routes的length属性来判断当前界面是否为根界面，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">let routes = [];</div><div class="line">let lastBackPressed = null;</div><div class="line"></div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        BackHandler.addEventListener(&apos;hardwareBackPress&apos;, this.onBackAndroid);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        BackHandler.removeEventListener(&apos;hardwareBackPress&apos;, this.onBackAndroid);</div><div class="line">        lastBackPressed = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onBackAndroid() &#123;</div><div class="line">        if (routes.length === 1) &#123; // 只需要判断length是否为1就能确定是否在根界面</div><div class="line">            if (lastBackPressed &amp;&amp; lastBackPressed + 2000 &gt;= Date.now()) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            lastBackPressed = Date.now();</div><div class="line">            Toast.showShortCenter(&apos;再点击一次退出应用&apos;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;AppNavigator</div><div class="line">                onNavigationStateChange=&#123;(prevNav, nav, action) =&gt; &#123;</div><div class="line">                console.log(&apos;prevNav=&apos;,prevNav);</div><div class="line">                console.log(&apos;nav=&apos;,nav);</div><div class="line">                console.log(&apos;action=&apos;,action);</div><div class="line">                routes = nav.routes;</div><div class="line">            &#125;&#125;/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司最近要用react-native开发App,我负责android端的开发,在本地大概做了一些后,需要打包个apk看一下,查看了官网教程看不太懂.结合搜集来的一些资料终于打包成功,在此记录一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Css选择器总结</title>
    <link href="http://yoursite.com/2017/10/20/Css%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/20/Css选择器总结/</id>
    <published>2017-10-20T07:17:06.000Z</published>
    <updated>2017-12-25T08:18:54.171Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中不管是写css还是js我们都需要用到css选择器来定位到需要操作的元素，但使用了这么久才发现，自己用来用去好像一直是用的id,class之类的比较简单的选择器，不过也确实能满足我们的绝大部分需求，今天突然想对所有的选择器进行个知识梳理，以便于在今后的开后的开发过程中，更加灵活应用、得心应手！ （id选择器和class子代,后代,标签，分组,通配符之类的就不废话，相信大家也都知道。这篇文章主要记录一些我们平时用的比较少的选择器，但是在某些场合下不得不用的选择器！）</p><a id="more"></a><h1 id="概念性的东西"><a href="#概念性的东西" class="headerlink" title="概念性的东西"></a>概念性的东西</h1><blockquote><p>要使用css对HTML页面中的元素实现一对一，一对多或者多对一的控制，这就需要用到&gt; CSS选择器。<br>  在 CSS 中，选择器是一种模式，用于选择需要添加样式的元素。</p></blockquote><p><br></p><h3 id="1-紧邻同胞选择符"><a href="#1-紧邻同胞选择符" class="headerlink" title="1 紧邻同胞选择符 +"></a>1 紧邻同胞选择符 +</h3><p>我一般叫它加号选择器    &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;标签 1 + 标签 2<br>标签 2必须紧跟在其同胞标签 1的后面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">只有内容为1的p标签会变红</div><div class="line"></div><div class="line">h2 + p &#123;background:red;&#125;</div><div class="line"></div><div class="line">&lt;h2&gt;hello&lt;/h2&gt;</div><div class="line">&lt;p&gt;1&lt;/p&gt;</div><div class="line">&lt;p&gt;2&lt;/p&gt;</div><div class="line">&lt;p&gt;3&lt;/p&gt;</div></pre></td></tr></table></figure></p><p>当我们需要给一列li添加border-right 为1px的边框时候，而最后一个添加border-right显然不太合适这个时候<strong>紧邻同胞选择符</strong>超级好用！</p><h3 id="2-一般同胞选择符"><a href="#2-一般同胞选择符" class="headerlink" title="2 一般同胞选择符 ~"></a>2 一般同胞选择符 ~</h3><p>一般同胞选择符~  标签 2（不一定紧跟）在其同胞标签 1后面。<br>另外一句话说就是标签1的所有同级元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">三个p标签都会变红</div><div class="line"></div><div class="line">h2 ~ p &#123;background:red;&#125;</div><div class="line"></div><div class="line">&lt;h2&gt;hello&lt;/h2&gt;</div><div class="line">&lt;p&gt;1&lt;/p&gt;</div><div class="line">&lt;p&gt;2&lt;/p&gt;</div><div class="line">&lt;p&gt;3&lt;/p&gt;</div></pre></td></tr></table></figure><p><br></p><h3 id="3-属性选择器-a-attr"><a href="#3-属性选择器-a-attr" class="headerlink" title="3 属性选择器  a[attr]"></a>3 属性选择器  a[attr]</h3><p>选择所有指定属性的元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">选择所有带有 target 属性的 a 元素。那些没有此属性的锚点将不会应用此样式。</div><div class="line"></div><div class="line">a[target]&#123; </div><div class="line">     background:red;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">当然我们还可以这样 选择所有属性为 target=<span class="string">"_blank"</span> 的 a 元素。只应用于在新标签页打开的链接，其他锚点将不受影响。</div><div class="line"></div><div class="line">a[target=_blank]&#123;</div><div class="line">    background:blue</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">还有这样（css2的属性选择器）  a[attr~=value] （选择属性值包含指定值的元素）  </div><div class="line">这样      a[attr|=value]   （选择属性以指定值开始的元素）</div><div class="line"></div><div class="line">~= 和 *= 都可以选择属性值包含指定值的元素，前者必须是一个独立的单词，</div><div class="line">比如 <span class="built_in">test</span><span class="_">-a</span> 和 <span class="built_in">test</span> a 可以被选中，而 testa 不能被选中。</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">（css3的属性选择器）</div><div class="line">a[href*=<span class="string">"zs"</span>]&#123;</div><div class="line">     background-color:red;</div><div class="line">     font-size:20px;</div><div class="line"> &#125;</div><div class="line">X[attr*=value]  这个选择器匹配元素属性值包含指定值的元素。</div><div class="line">该选择器类似于与上面的选择器，但是比上面的选择器更强大更灵活。</div><div class="line">* 符号可以选择指定属性值包含子字符串的元素，</div><div class="line">也就说，只要属性值中带有指定的值，无需是一个单词，无需空格分开，就可以匹配。  </div><div class="line"></div><div class="line"> </div><div class="line">a[href^=<span class="string">"https"</span>]&#123;</div><div class="line">     background-color:red;</div><div class="line">&#125;</div><div class="line">X[attr^=value]  这个选择器用于匹配元素属性值带有指定的值开始的元素。</div><div class="line"></div><div class="line"></div><div class="line">img[src$=<span class="string">".png"</span>]&#123;</div><div class="line">     border:2px solid red;</div><div class="line">&#125;</div><div class="line">X[attr$=value]  这个选择器匹配元素属性值带有指定的值结尾的元素。</div></pre></td></tr></table></figure><p><br></p><h3 id="4-伪类选择器"><a href="#4-伪类选择器" class="headerlink" title="4 伪类选择器"></a>4 伪类选择器</h3><p>伪类选择器遵循  love hate原则 （哈哈爱恨情仇呀）<br>什么是Love hate呢 ？<br>伪类选择器有 :link   :visited  :hover  :active<br>为一个a标签添加点击链接的各个阶段的状态，只需要按照上面的顺序添加就不会出现奇怪的状态<br>当然伪类选择器还有 :target  :focus</p><h3 id="5-伪元素选择器"><a href="#5-伪元素选择器" class="headerlink" title="5 伪元素选择器"></a>5 伪元素选择器</h3><p>伪元素和伪类虽然都可以用<code>:</code>来表示，但我们最好还是区分开来使用</p><ul><li><code>:</code> 是伪类选择器</li><li><code>::</code> 是伪元素选择器<br>伪元素选择器我们用的最多的就是用来清除浮动了,</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.clearfix::before&#123;</div><div class="line">    content:<span class="string">'.'</span>;</div><div class="line">    height:0;</div><div class="line">    visibility:hidden;</div><div class="line">    overflow:hidden;</div><div class="line">    display: block;</div><div class="line">    clear:both;</div><div class="line">&#125;</div><div class="line">.clearfix&#123; </div><div class="line">    /*兼容 IE*/</div><div class="line">     zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>伪元素<code>:：before ::after</code>的用法非常多，我在此就不一一列举了</p><h3 id="6-具体子元素选择器？（好吧我也不知道这类该叫什么）"><a href="#6-具体子元素选择器？（好吧我也不知道这类该叫什么）" class="headerlink" title="6 具体子元素选择器？（好吧我也不知道这类该叫什么）"></a>6 具体子元素选择器？（好吧我也不知道这类该叫什么）</h3><p>一直对这类元素选择器的用法迷迷糊糊，使用起来都是尝试~怼样式</p><p>先把这类选择器统一列出来吧</p><ul><li><ol><li>:first-child</li><li>:last-child</li><li>:nth-child(n)</li><li>:nth-last-child(n) </li></ol></li><li><ol><li>:first-of-type </li><li>:last-of-type</li><li>:nth-of-type(n)</li><li>:nth-last-of-type(n)</li></ol></li></ul><p>我把他们分为两类方便记忆，一类是带of-type的一类是不带的<br>挑两个出来举个栗子</p><blockquote><p>:nth-child(n)    </p><p> w3c上的定义为选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> &lt;style&gt;</div><div class="line">        div &#123;</div><div class="line">            margin-top: 60px;</div><div class="line">        &#125;</div><div class="line">        p &#123;</div><div class="line">            background-color: <span class="comment">#ccc;</span></div><div class="line">        &#125;</div><div class="line">        .<span class="built_in">test</span> &gt; :nth-child(3) &#123;</div><div class="line">            background: red;</div><div class="line">        &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p&gt;1&lt;/p&gt;</div><div class="line">    &lt;p&gt;2&lt;/p&gt;</div><div class="line">    &lt;p&gt;3&lt;/p&gt;</div><div class="line">    &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">        &lt;p&gt;hello&lt;/p&gt;</div><div class="line">        &lt;h1&gt;我不是P标签&lt;/h1&gt;</div><div class="line">        &lt;p&gt;world&lt;/p&gt;</div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"one"</span>&gt;</div><div class="line">        &lt;p&gt;hello&lt;/p&gt;</div><div class="line">        &lt;p&gt;world&lt;/p&gt;</div><div class="line">        &lt;h1&gt;我不是P标签&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><p>显示如图所示<br><img src="/2017/10/20/Css选择器总结/1.png" alt="first-chid()"></p><p>所以我们在这里匹配的是属于其test的第 3 个子元素变成了红色！<br><br></p><blockquote><p>:first-of-type   </p><p> w3c上的定义为选择器匹配属于其父元素的特定类型的首个子元素的每个元素。</p></blockquote><p>我们稍微改下代码 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.<span class="built_in">test</span> &gt; :first-of-type &#123;</div><div class="line">            background: red;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>可以看到test下的第一个P标签和第一个h1标签的颜色都发生了改变。<br><img src="/2017/10/20/Css选择器总结/2.png" alt="first-of-type"><br>其他的应该都是一样的。我就不一一列举了</p><p><strong>其实我们用到最多的还是隔行变色的这个功能</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">p:nth-child(2n)&#123;</div><div class="line">    background:red</div><div class="line">&#125;</div><div class="line">p:nth-child(2n+1)&#123;</div><div class="line">    bgackground:blue</div><div class="line">&#125;</div><div class="line"></div><div class="line">这里2n和2n+1 可以换成  odd 和even  当然如果填3n的话就是每隔3行执行一次</div></pre></td></tr></table></figure></p><p><br></p><h3 id="7-only-of-type-和-only-child"><a href="#7-only-of-type-和-only-child" class="headerlink" title="7 :only-of-type 和 :only-child"></a>7 :only-of-type 和 :only-child</h3><p>如何区分这两个呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">      .test1 &gt;:only-child&#123;</div><div class="line">        background-color: green;</div><div class="line">        margin-bottom: 50px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .test2 &gt;:only-of-type&#123;</div><div class="line">        background-color: red</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">    &lt;div class=<span class="string">"test1"</span>&gt;</div><div class="line">        &lt;p&gt;我是:only-child &lt;/p&gt;</div><div class="line">        &lt;h1&gt;因为加上我所以失效了&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"test2"</span>&gt;</div><div class="line">        &lt;p&gt;我是only-of-type&lt;/p&gt;</div><div class="line">        &lt;h1&gt;11111&lt;/h1&gt;</div><div class="line">        &lt;h2&gt;&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"test2"</span>&gt;</div><div class="line">            &lt;p&gt;我是only-of-type&lt;/p&gt;</div><div class="line">            &lt;p&gt;因为加上我所以test2中所以得p标签失效&lt;/p&gt;</div><div class="line">            &lt;h1&gt;11111&lt;/h1&gt;</div><div class="line">            &lt;h2&gt;2222&lt;/h2&gt;</div><div class="line">    &lt;/div&gt;</div></pre></td></tr></table></figure><p><img src="/2017/10/20/Css选择器总结/3.png" alt="only-chid"></p><ul><li><code>:only-of-type</code> 父元素下可以有多个元素，但每种类型的标签只能有一个，如果同一类型标签出现了两次，那么本类型标签失效（其实就是没有选中）</li><li><code>:only-child</code> 父元素下可以只能有一个！</li></ul><p><br><br>注意：IE9+ 以及所有浏览器都支持该选择器，IE8 以及更早版本的浏览器不支持这两个属性。</p><p><br></p><h3 id="8-not-selector"><a href="#8-not-selector" class="headerlink" title="8 :not(selector)"></a>8 :not(selector)</h3><p>这个选择器还是很强大的，用于匹配非指定元素/选择器的每个元素，可以理解为取反的意思，即除了指定的元素以外所有元素。</p><p><br><br>注意：IE9+ 以及所有浏览器都支持该选择器，IE8 以及更早版本的浏览器不支持。</p><h3 id="9-selection"><a href="#9-selection" class="headerlink" title="9 ::selection"></a>9 ::selection</h3><p>::selection 选择器匹配元素中被用户选择或处于高亮状态的部分。<br>::selection只可以应用于少数的CSS属性：color、background、cursor 和 outline。<br>下面的代码，当元素被用户选中后会显示为红色的字体：</p><p><br><br>注意：IE9+ 以及所有浏览器都支持该选择器，但是 Firefox 需要通过其私有属性<br>::-moz-selection才能获得支持 。</p><p><br></p><h3 id="10-empty"><a href="#10-empty" class="headerlink" title="10 :empty"></a>10 :empty</h3><p>这个选择器用于匹配没有子元素的每个元素，包括文本节点。<br>选择所有没有任何子级的元素，也就是说选择页面中所有指定的空元素。</p><p><br><br>　注意：IE9+ 以及所以浏览器都支持该选择器，IE8 以及更早版本的浏览器不支持。<br><br></p><h3 id="11-root"><a href="#11-root" class="headerlink" title="11 :root"></a>11 :root</h3><p>:root 匹配文档的根元素，在 HTML 中，根元素始终是 html 元素。<br><br><br>　注意：IE9+ 以及所以浏览器都支持该选择器，IE8 以及更早版本的浏览器不支持。<br><br></p><h3 id="12-enabled-disabled"><a href="#12-enabled-disabled" class="headerlink" title="12 :enabled    :disabled"></a>12 :enabled    :disabled</h3><ul><li>:enabled用于匹配每个启用的元素，主要用于表单元素。 </li><li>:disabled 用于匹配每个禁用的元素，主要用于表单元素。<br>下面的例子，设置所有 type=”text” 的已启用的 input 元素设置背景色：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">  input[type=&quot;text&quot;]:enabled&#123;</div><div class="line">      background:yellow;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;form action=&quot;&quot;&gt;</div><div class="line">     姓名: &lt;input type=&quot;text&quot; value=&quot;小明&quot; /&gt;&lt;br/&gt;</div><div class="line">     爱好: &lt;input type=&quot;text&quot; value=&quot;捣蛋&quot; /&gt;&lt;br/&gt;</div><div class="line">     籍贯: &lt;input type=&quot;text&quot; disabled value=&quot;汉&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><p><img src="/2017/10/20/Css选择器总结/4.png" alt="enabled"></p><p><br><br>　注意：IE9+ 以及所以浏览器都支持该选择器，IE8 以及更早版本的浏览器不支持。<br><br></p><h3 id="12-checked"><a href="#12-checked" class="headerlink" title="12 :checked"></a>12 :checked</h3><p>匹配每个选中的输入元素，仅适用于单选按钮或复选框。<br>下面的例子，为所有被选中的 input 元素设置背景色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line"> input:checked&#123;</div><div class="line">      background:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line"> &lt;form action=&quot;&quot;&gt;</div><div class="line">     &lt;input type=&quot;radio&quot; checked name=&quot;like&quot; value=&quot;love&quot; /&gt;喜欢&lt;br&gt;</div><div class="line">     &lt;input type=&quot;radio&quot; name=&quot;like&quot; value=&quot;noLove&quot; /&gt;不喜欢&lt;br&gt;</div><div class="line">     &lt;input type=&quot;checkbox&quot; checked value=&quot;散步&quot; /&gt;散步&lt;br&gt;</div><div class="line">     &lt;input type=&quot;checkbox&quot; value=&quot;跑步&quot; /&gt;跑步</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure><p><br><br>注意：目前只有 IE9+ 和 Opera 浏览器支持该选择器，Chrome 和 Firefox 不支持。而且在 IE9/IE10/IE11 中显示有差异。<br><br></p><p>在 IE9 和 IE10 中显示如下： <img src="/2017/10/20/Css选择器总结/5.png" alt="ie9和ie10"><br>在 IE11 中取消了对复选框的支持，显示如下： <img src="/2017/10/20/Css选择器总结/6.png" alt="ie11"></p><h3 id="13-readonly"><a href="#13-readonly" class="headerlink" title="13 : readonly"></a>13 : readonly</h3><p>readonly 属性规定输入字段为只读。<br>只读字段是不能修改的。不过，用户仍然可以使用 tab 键切换到该字段，还可以选中或拷贝其文本。<br>readonly 属性可以防止用户对值进行修改，直到满足某些条件为止（比如选中了一个复选框）。然后，需要使用 JavaScript 消除 readonly 值，将输入字段切换到可编辑状态。<br>readonly 属性可与 <code>&lt;input type=&quot;text&quot;&gt;</code> 或 <code>&lt;input type=&quot;password&quot;&gt;</code> 配合使用。</p><h3 id="14-optional-和-required"><a href="#14-optional-和-required" class="headerlink" title="14 :optional 和 :required"></a>14 :optional 和 :required</h3><p>匹配可选的输入元素，在表单元素是可选项时设置指定的样式，即未设置  required 属性的表单素。<br>required 属性是 HTML5 新增加的表单属性，用于规定必需在提交表单之前填写输入字段。<br>表单元素中如果没有特别设置 required 属性即为可选的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> &lt;style&gt;</div><div class="line"> input:optional&#123;</div><div class="line">     background-color:yellow;</div><div class="line"> &#125;</div><div class="line">input:required&#123;</div><div class="line">     background-color:green;</div><div class="line"> &#125;</div><div class="line"> &lt;/style&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line"> &lt;p&gt;可选的 input 元素：&lt;input type=&quot;text&quot; /&gt;&lt;/p&gt;</div><div class="line"> &lt;p&gt;必填的 input 元素：&lt;input type=&quot;text&quot; required /&gt;&lt;/p&gt;</div><div class="line"> &lt;/body&gt;</div></pre></td></tr></table></figure></p><p><img src="/2017/10/20/Css选择器总结/8.png" alt=":optional和:required"><br><br><br>注意： :optional  :required 选择器只适用于表单元素：input、select 和 textarea。如下：<br>注意： IE10+ 以及所有浏览器都支持该选择器，IE9 以及更早版本的浏览器不支持。<br><br></p><h3 id="15-valid-和-invalid"><a href="#15-valid-和-invalid" class="headerlink" title="15 :valid 和 :invalid"></a>15 :valid 和 :invalid</h3><p>匹配输入值为合法的元素，在表单元素的值需要根据指定条件验证时设置指定样式。<br><strong>注意</strong>： :valid 选择器只作用于能指定区间值的元素，例如 input 元素中的 min 和 max 属性，及正确的 email 字段，合法的数字字段等。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;style&gt;</div><div class="line">  input:valid&#123;</div><div class="line">      background-color:green;</div><div class="line">  &#125;</div><div class="line">  input:invalid&#123;</div><div class="line">     border:2px solid red;</div><div class="line"> &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line"> &lt;p&gt;合法邮箱：&lt;/p&gt;</div><div class="line"> &lt;input type=&quot;email&quot; value=&quot;demo@xx.com&quot; /&gt;</div><div class="line"> &lt;p&gt;非法邮箱：&lt;/p&gt;</div><div class="line"> &lt;input type=&quot;email&quot; value=&quot;demo.com&quot; /&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure><p><img src="/2017/10/20/Css选择器总结/7.png" alt="valid和invalid"><br><br><br>注意：IE10+ 以及所有浏览器都支持该选择器，IE9 以及更早版本的浏览器不支持。<br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中不管是写css还是js我们都需要用到css选择器来定位到需要操作的元素，但使用了这么久才发现，自己用来用去好像一直是用的id,class之类的比较简单的选择器，不过也确实能满足我们的绝大部分需求，今天突然想对所有的选择器进行个知识梳理，以便于在今后的开后的开发过程中，更加灵活应用、得心应手！ （id选择器和class子代,后代,标签，分组,通配符之类的就不废话，相信大家也都知道。这篇文章主要记录一些我们平时用的比较少的选择器，但是在某些场合下不得不用的选择器！）&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="选择器" scheme="http://yoursite.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建个人博客笔记</title>
    <link href="http://yoursite.com/2017/10/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/19/hexo搭建个人博客笔记/</id>
    <published>2017-10-19T03:16:05.000Z</published>
    <updated>2017-10-19T05:32:06.212Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直都很羡慕别人有自己的博客，这几天空闲下来。想搭建一个属于自己的博客。在查阅资料后发现<a href="https://hexo.io/" target="_blank" rel="external">hexo</a> + <a href="github.com">github</a>就可以搭建,在此记录一下搭建博客过程中遇到的一些问题</p><a id="more"></a><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul><li>安装Node（必须）<br> 作用：用来生成静态页面的<br> 到Node.js官网下载相应平台的最新版本，一路安装即可。</li><li>安装Git（必须）<br>作用：把本地的hexo内容提交到github上去.</li><li>申请GitHub（必须）</li></ul><blockquote><p>安装的教程我都不多说了，贴几个链接自行安装</p><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js下载完傻瓜式安装</a></li><li><a href="https://hexo.io/" target="_blank" rel="external">hexo有中文版教程</a></li><li>github要建立仓库</li></ol></blockquote><h3 id="1-配置hexo关联github"><a href="#1-配置hexo关联github" class="headerlink" title="1 配置hexo关联github"></a>1 配置hexo关联github</h3><p>找到hexo新建项目根目录下的 <code>_config.yml文件</code>  来建立关联,翻到最下面改成这个样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">     type: git</div><div class="line">     // ！这个是你github项目下的仓库地址  新建仓库名字一定要对应起来！</div><div class="line">     repo: git@github.com:Earlzs/Earlzs.github.io.git   </div><div class="line">     branch: master</div></pre></td></tr></table></figure></p><p>然后执行命令  <code>npm install hexo-deployer-git --save</code><br>这个应该是装了一个hexo的插件 根据 <code>_config.yml</code>文件下刚才我们配置的东西直接方便直接推送至git上面</p><h3 id="2-部署步骤"><a href="#2-部署步骤" class="headerlink" title="2 部署步骤"></a>2 部署步骤</h3><p>我们可以在本地浏览自己的博客  执行<code>hexo server (简写hexo s)</code></p><p>每次部署到github上的步骤，可按以下三步来进行。</p><ol><li>hexo clean (可以省略不写,如果直接执行2，3有问题的话试一下)</li><li>hexo generate(简写 hexo g)</li><li>hexo deploy(简写 hexo d)</li></ol><h3 id="3-主题推荐"><a href="#3-主题推荐" class="headerlink" title="3 主题推荐"></a>3 主题推荐</h3><p>hexo 默认为我们配置了一个主题在 <code>themes目录下可以找到</code><br>当然如果你不喜欢的话  <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题列表</a> 这里有大量的主题供我们下载<br>我的博客使用的是  <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a><br>找到自己喜欢的主题后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure></p><p>然后在<code>项目根目录下的themes目录下就可以看到了</code><br>在将根目录下的<code>_config.yml文件</code> 修改  ： <code>theme: yilia</code></p><h3 id="4-添加『RSS订阅』"><a href="#4-添加『RSS订阅』" class="headerlink" title="4 添加『RSS订阅』"></a>4 添加『RSS订阅』</h3><p>安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a> 插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure></p><p>执行 hexo g  然后在 public目录下就可以看到  <code>atom.xml</code> 文件<br>最后在去你选择的主题目录下找到<code>_config.yml</code>配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">subnav:</div><div class="line">  rss: &quot;/atom.xml&quot;</div></pre></td></tr></table></figure></p><h3 id="5-在网站底部加上访问量"><a href="#5-在网站底部加上访问量" class="headerlink" title="5  在网站底部加上访问量"></a>5  在网站底部加上访问量</h3><ol><li><p>打开\themes\yilia\layout\footer.ejs文件,在底部加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>然后再合适的位置添加显示统计的代码，如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;powered-by&quot;&gt;</div><div class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</div><div class="line">本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></li><li><p>添加之后再执行hexo d -g，然后再刷新页面就能看到效果</p></li></ol><h3 id="6-添加顶部加载条"><a href="#6-添加顶部加载条" class="headerlink" title="6 添加顶部加载条"></a>6 添加顶部加载条</h3><p>打开/themes/next/layout/_partials/head.ejs文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt;   //pink可以自行改成自己喜欢的颜色</div></pre></td></tr></table></figure></p><h3 id="7-添加404公益页面"><a href="#7-添加404公益页面" class="headerlink" title="7 添加404公益页面"></a>7 添加404公益页面</h3><p>新建404.html页面放到source目录下面。（注意，不要放到source下的post里面）<br>放在source下的文件会被上传但不会被解析到文章里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;404&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">自定义</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>或者 加入腾讯公益<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;404&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://yoursite.com/yourPage.html&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>在本地是看不到的~ 需要到你的Github托管地址看</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直都很羡慕别人有自己的博客，这几天空闲下来。想搭建一个属于自己的博客。在查阅资料后发现&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; + &lt;a href=&quot;github.com&quot;&gt;github&lt;/a&gt;就可以搭建,在此记录一下搭建博客过程中遇到的一些问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/18/hello-world/"/>
    <id>http://yoursite.com/2017/10/18/hello-world/</id>
    <published>2017-10-18T07:11:32.680Z</published>
    <updated>2017-10-18T07:16:13.160Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
